rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isVerified() {
      return isSignedIn() && request.auth.token.email_verified == true;
    }

    function isAdmin() {
      // Admins are identified by a custom auth token claim set server-side
      // or by a whitelisted email (fallback when claims aren't set yet)
      return isSignedIn() && (
        request.auth.token.role == 'admin' ||
        request.auth.token.email in ['admin@ugsdesk.com']
      );
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }

    // Users collection: users can read their own doc when signed in (even if not yet verified) and admins can read any.
    match /users/{uid} {
      allow read: if (isSignedIn() && request.auth.uid == uid) || isAdmin();
      // Creation allowed for signed-in user to create their own doc without role changes
      allow create: if (isSignedIn() && request.auth.uid == uid) || isAdmin();
      // Updates: user can update their own non-privileged fields when signed in; prevent role escalation
      allow update: if (
        (
          isSignedIn() && request.auth.uid == uid &&
          // Non-admins cannot write 'role'
          !("role" in request.resource.data.diff(resource.data).affectedKeys())
        )
      ) || isAdmin();
      // Deletes restricted to admin (or the user can delete their own if desired; keep admin-only for safety)
      allow delete: if isAdmin();
    }

    // Visa applications: owner can create/read; updates only while draft and cannot change status; admin full access
    match /visaApplications/{appId} {
      // Allow signed-in owners to read/create their own applications (no email verification requirement)
      allow read: if (isSignedIn() && resource.data.uid == request.auth.uid) || isAdmin();
      allow create: if (isSignedIn() && request.resource.data.uid == request.auth.uid) || isAdmin();
      // Owner updates allowed only while draft and status unchanged; admin can always update
      allow update: if isAdmin() || (
        isSignedIn() && request.resource.data.uid == request.auth.uid &&
        resource.data.status == 'draft' &&
        request.resource.data.status == resource.data.status
      );
      // Delete: admin always; owner only if draft
      allow delete: if isAdmin() || (
        isSignedIn() && resource.data.uid == request.auth.uid && resource.data.status == 'draft'
      );

      // Messages subcollection for admin<>client chat
      match /messages/{messageId} {
        function appOwner() {
          return get(/databases/$(database)/documents/visaApplications/$(appId)).data.uid == request.auth.uid;
        }
        allow read: if isAdmin() || (isSignedIn() && appOwner());
        // Only the application owner (client) or an admin may create a message.
        // Validate message schema and sender identity/role.
        allow create: if (
          // Admin sending to client
          isAdmin() &&
          request.resource.data.byUid == request.auth.uid &&
          request.resource.data.byRole == 'admin' &&
          request.resource.data.text is string &&
          request.resource.data.text.size() > 0 &&
          request.resource.data.keys().hasOnly(['text','byUid','byRole','createdAt'])
        ) || (
          // Client (owner) sending to admin
          isSignedIn() && appOwner() &&
          request.resource.data.byUid == request.auth.uid &&
          request.resource.data.byRole == 'user' &&
          request.resource.data.text is string &&
          request.resource.data.text.size() > 0 &&
          request.resource.data.keys().hasOnly(['text','byUid','byRole','createdAt'])
        );
        // No updates to messages after write to preserve audit; allow delete by admin only
        allow update: if false;
        allow delete: if isAdmin();
      }
    }

    // Documents uploaded per user (if you use a separate collection)
    match /documents/{docId} {
      allow read: if isVerified() && resource.data.uid == request.auth.uid || isAdmin();
      allow create: if (isVerified() && request.resource.data.uid == request.auth.uid) || isAdmin();
      allow update, delete: if (
        isVerified() && request.resource.data.uid == request.auth.uid
      ) || isAdmin();
    }

    // Admin-managed system collections used during seeding
    match /payments/{docId} {
      allow read, write: if isAdmin();
    }

    // Top-level direct messages between a client (user) and admin
    // Schema: { userId, text, byUid, byRole, createdAt }
    match /messages/{docId} {
      // Clients can read their own thread; admins can read all
      allow read: if isAdmin() || (isSignedIn() && resource.data.userId == request.auth.uid);

      // Creation rules:
      // - Client can write their own messages (byRole 'user') only for their own userId
      // - Admin can write messages to any user (byRole 'admin')
      allow create: if (
        // Client sending
        isSignedIn() &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.byUid == request.auth.uid &&
        request.resource.data.byRole == 'user' &&
        request.resource.data.text is string &&
        request.resource.data.text.size() > 0 &&
        request.resource.data.keys().hasOnly(['userId','text','byUid','byRole','createdAt'])
      ) || (
        // Admin sending
        isAdmin() &&
        request.resource.data.byRole == 'admin' &&
        request.resource.data.byUid == request.auth.uid &&
        request.resource.data.userId is string &&
        request.resource.data.text is string &&
        request.resource.data.text.size() > 0 &&
        request.resource.data.keys().hasOnly(['userId','text','byUid','byRole','createdAt'])
      );

      // Immutable after write; admin may delete if necessary
      allow update: if false;
      allow delete: if isAdmin();
    }

    match /audits/{docId} {
      allow read, write: if isAdmin();
    }

    // VisaEd registrations: allow admin full access; allow verified users to create and read their own
    match /visaEdRegistrations/{regId} {
      allow read: if isAdmin() || (isVerified() && resource.data.uid == request.auth.uid);
      allow create: if isAdmin() || (isVerified() && request.resource.data.uid == request.auth.uid);
      allow update, delete: if isAdmin();
    }

    // Settings: read-only to verified users; write admin only
    match /settings/{doc} {
      allow read: if isVerified() || isAdmin();
      allow write: if isAdmin();
    }
  }
}
