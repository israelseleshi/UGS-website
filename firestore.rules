rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isVerified() {
      return isSignedIn() && request.auth.token.email_verified == true;
    }

    function isAdmin() {
      // Admins are identified by a custom auth token claim set server-side
      // or by a whitelisted email (fallback when claims aren't set yet)
      return isSignedIn() && (
        request.auth.token.role == 'admin' ||
        request.auth.token.email in ['admin@ugsdesk.com']
      );
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }

    // Users collection: users can read their own doc when signed in (even if not yet verified) and admins can read any.
    match /users/{uid} {
      allow read: if (isSignedIn() && request.auth.uid == uid) || isAdmin();
      // Creation allowed for signed-in user to create their own doc without role changes
      allow create: if (isSignedIn() && request.auth.uid == uid) || isAdmin();
      // Updates: user can update their own non-privileged fields when signed in; prevent role escalation
      allow update: if (
        (
          isSignedIn() && request.auth.uid == uid &&
          // Non-admins cannot write 'role'
          !("role" in request.resource.data.diff(resource.data).affectedKeys())
        )
      ) || isAdmin();
      // Deletes restricted to admin (or the user can delete their own if desired; keep admin-only for safety)
      allow delete: if isAdmin();
    }

    // Visa applications: owner can create/read; updates only while draft and cannot change status; admin full access
    match /visaApplications/{appId} {
      allow read: if (isVerified() && resource.data.uid == request.auth.uid) || isAdmin();
      allow create: if (isVerified() && request.resource.data.uid == request.auth.uid) || isAdmin();
      // Owner updates allowed only while draft and status unchanged; admin can always update
      allow update: if isAdmin() || (
        isVerified() && request.resource.data.uid == request.auth.uid &&
        resource.data.status == 'draft' &&
        request.resource.data.status == resource.data.status
      );
      // Delete: admin always; owner only if draft
      allow delete: if isAdmin() || (
        isVerified() && resource.data.uid == request.auth.uid && resource.data.status == 'draft'
      );

      // Messages subcollection for admin<>client chat
      match /messages/{messageId} {
        function appOwner() {
          return get(/databases/$(database)/documents/visaApplications/$(appId)).data.uid == request.auth.uid;
        }
        allow read: if isAdmin() || (isVerified() && appOwner());
        allow create: if isAdmin() || (isVerified() && appOwner());
        // No updates to messages after write to preserve audit; allow delete by admin only
        allow update: if false;
        allow delete: if isAdmin();
      }
    }

    // Documents uploaded per user (if you use a separate collection)
    match /documents/{docId} {
      allow read: if isVerified() && resource.data.uid == request.auth.uid || isAdmin();
      allow create: if (isVerified() && request.resource.data.uid == request.auth.uid) || isAdmin();
      allow update, delete: if (
        isVerified() && request.resource.data.uid == request.auth.uid
      ) || isAdmin();
    }

    // Admin-managed system collections used during seeding
    match /payments/{docId} {
      allow read, write: if isAdmin();
    }

    match /messages/{docId} {
      allow read, write: if isAdmin();
    }

    match /audits/{docId} {
      allow read, write: if isAdmin();
    }

    // Settings: read-only to verified users; write admin only
    match /settings/{doc} {
      allow read: if isVerified() || isAdmin();
      allow write: if isAdmin();
    }
  }
}
